.\" Text automatically generated by txt2man
.TH outguess 1 "02 Sep 2021" "outguess-0.4" "universal steganographic tool "
.SH NAME
\fBoutguess \fP- universal steganographic tool
\fB
.SH SYNOPSIS
.nf
.fam C
 \fBoutguess\fP [\fIOPTIONS\fP] \fIinputfile\fP \fIoutputfile\fP

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
OutGuess is a universal steganographic tool that allows the insertion of
hidden information into the redundant bits of data sources. The nature of the
data source is irrelevant to the core of OutGuess. The program relies on data
specific handlers that will extract redundant bits and write them back after
modification. Currently only the PPM, PNM, and JPEG image formats are
supported, although OutGuess could use any kind of data, as long as a handler
were provided.
.PP
OutGuess uses a generic iterator object to select which bits in the data
should be modified. A seed can be used to modify the behavior of the iterator.
It is embedded in the data along with the rest of the message. By altering the
seed, OutGuess tries to find a sequence of bits that minimizes the number of
changes in the data that have to be made.
.PP
A bias is introduced that favors the modification of bits that were extracted
from a high value, and tries to avoid the modification of bits that were
extracted from a low value.
.PP
Additionally, OutGuess allows for the hiding of two distinct messages in the
data, thus providing plausible deniability. It keeps track of the bits that
have been modified previously and locks them. A (23,12,7) Golay code is used
for error correction to tolerate collisions on locked bits. Artificial errors
are introduced to avoid modifying bits that have a high bias.
.SH OPTIONS
The following command line options, when specified as capital letters,
indicate options for the second message.
.TP
.B
\fB-F\fP [+-]
Specifies that OutGuess should preserve statistics based on
frequency counts. As a result, no statistical test that is
based on frequency counts will be able to detect
steganographic content. This option is set as on by default.
.TP
.B
\fB-kK\fP <key>
Specify the secret key used to encrypt and hide the message in
the provided data.
.TP
.B
\fB-dD\fP <datafile>
Specify the filename containing a message to be hidden in the
data.
.TP
.B
\fB-sS\fP <seed>
Specify the initial seed the iterator object uses for selecting
bits in the redundant data. If no upper limit is specified, the
iterator will use this seed without searching for a more
optimal embedding.
.TP
.B
\fB-iI\fP <limit>
Specify the upper limit for finding an optimal iterator seed.
The maximum value for the limit is 65535.
.TP
.B
\fB-eE\fP
Use error correction for data encoding and decoding.
.PP
Other options that apply to the general execution of OutGuess:
.TP
.B
\fB-r\fP
Retrieve a message from a data object. If this option is not
specified, OutGuess will embed messages.
.TP
.B
\fB-x\fP <maxkeys>
If the second key does not create an iterator object that is
successful in embedding the data, the program will derive up to
specified number of new keys.
.TP
.B
\fB-p\fP param
Passes a string as parameter to the destination data handler.
For the JPEG image format, this is the compression quality, it
can take values between 75 and 100. The higher the quality the
more bits to hide a message in the data are available.
.TP
.B
\fB-m\fP
Mark pixels that have been modified.
.TP
.B
\fB-t\fP
Collect statistics about redundant bit usage. Repeated use
increases output level.
.TP
.B
\fB-h\fP
Print a usage help text and exit.
.PP
For embedding messages, you need to specify a source and a destination
filename. OutGuess determines the data format by the filename extension. If no
filenames are specified OutGuess operates as a filter and assumes the PPM data
format.
.SH EXAMPLES
To embed the message hidden.txt into the monkey.jpg image:
.PP
.nf
.fam C
    $ outguess -k "my secret pass phrase" -d hidden.txt monkey.jpg out.jpg

.fam T
.fi
And in the other direction:
.PP
.nf
.fam C
    $ outguess -k "my secret pass phrase" -r out.jpg message.txt

.fam T
.fi
will retrieve the hidden message from the image.
.PP
If you want to embed a second message, use:
.PP
.nf
.fam C
    $ outguess -k "secret1" -d hide1.txt -E -K "secret2" -D hide2.txt monkey.jpg out.jpg

.fam T
.fi
OutGuess will first embed hide1.txt and then hide2.txt on top of it, using
error correcting codes. The second message hide2.txt can be retrieved with
.PP
.nf
.fam C
    $ outguess -k "secret2" -e -r out.jpg message.txt

.fam T
.fi
.SH SEE ALSO
\fBcjpeg\fP(1), \fBdjpeg\fP(1), \fBpnm\fP(5), \fBseek_script\fP(1), \fBstirmark\fP(1)
.SH AUTHOR
OutGuess was originally developed by Niels Provos <provos@citi.umich.edu> and
is maintained by some people.
.PP
Currently, source code and newer versions are available at
https://github.com/resurrecting-open-source-projects/\fBoutguess\fP
